!function(){"use strict";class e{constructor(e,t,s,r,i){let{name:n,link:o,isLiked:a,_id:l}=e;this._name=n,this._link=o,this._isLiked=a,this._id=l,this._cardSelector=t,this._handleImageClick=s,this._handleDeleteClick=r,this._handleLikeClick=i}_setEventListeners(){this._cardElement.querySelector(".card__image").addEventListener("click",(()=>{this._handleImageClick({name:this._name,link:this._link})})),this._cardElement.querySelector(".card__like-button").addEventListener("click",(()=>{this._handleLikeClick(this)})),this._cardElement.querySelector(".card__delete-button").addEventListener("click",(()=>{this._handleDeleteClick(this)}))}handleDeleteCard(){this._cardElement.remove(),this._cardElement=null}isLiked(){return this._isLiked}setIsLiked(e){this._isLiked=e,this._renderLikes()}_renderLikes(){this._isLiked?this._cardElement.querySelector(".card__like-button").classList.add("card__like-button_active"):this._cardElement.querySelector(".card__like-button").classList.remove("card__like-button_active")}createCard(){this._renderLikes()}getView(){return this._cardElement=document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0),this._cardElement.querySelector(".card__image").setAttribute("src",this._link),this._cardElement.querySelector(".card__image").setAttribute("alt",this._name),this._cardElement.querySelector(".card__title").textContent=this._name,this._renderLikes(),this._setEventListeners(),this._cardElement}}class t{constructor(e,t){this._formElement=t,this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)}_toggleButtonState(){this._hasInvalidInput()?this.disableButton():this._enableButton()}_hideInputError(e){this._errorMessageEl=this._formElement.querySelector(`#${e.id}-error`),e.classList.remove(this._inputErrorClass),this._errorMessageEl.textContent="",this._errorMessageEl.classList.remove(this._errorClass)}_showInputError(e){this._errorMessageEl=this._formElement.querySelector(`#${e.id}-error`),e.classList.add(this._inputErrorClass),this._errorMessageEl.textContent=e.validationMessage,this._errorMessageEl.classList.add(this._errorClass)}_hasInvalidInput(){return this._inputEls.some((e=>!e.validity.valid))}_enableButton(){this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1}_setEventListeners(){this._inputEls=[...this._formElement.querySelectorAll(this._inputSelector)],this._submitButton=this._formElement.querySelector(this._submitButtonSelector),this._inputEls.forEach((e=>{e.addEventListener("input",(t=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}disableButton(){this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0}enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault(),this.disableButton()})),this._setEventListeners(),this._toggleButtonState()}}class s{constructor(e){let{popupSelector:t}=e;this._popup=document.querySelector(t)}_handleEscClose=e=>"Escape"===e.key?this.close():null;open(){this._popup.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popup.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}setEventListeners(){this._popup.addEventListener("mousedown",(e=>{(e.target.classList.contains("modal")||e.target.classList.contains("modal__close"))&&this.close()}))}}class r extends s{constructor(e,t,s){let{popupSelector:r}=e;super({popupSelector:r}),this._popupForm=this._popup.querySelector(".modal__form"),this._handleFormSubmit=t,this._inputValues={},this._formInputs=this._popup.querySelectorAll(".modal__input"),this._submitButton=this._popup.querySelector(".modal__button"),this._buttonText=this._submitButton.textContent,this._loadingButtonText=s}_getInputValues(){return this._formInputs.forEach((e=>{this._inputValues[e.name]=e.value})),this._inputValues}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",(e=>{e.preventDefault();const t=this._getInputValues();this._handleFormSubmit(t)}))}showLoading(){this._submitButton.textContent=this._loadingButtonText}hideLoading(){this._submitButton.textContent=this._buttonText}}const i=document.querySelector("#profile-edit-button"),n=document.querySelector("#profile-edit-modal"),o=document.querySelector("#profile-title-input"),a=document.querySelector("#profile-description-input"),l=n.querySelector(".modal__form"),c=document.querySelector(".profile__add-button"),d=document.querySelector("#card-add-modal").querySelector(".modal__form"),h={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"},u=document.querySelector(".profile__image-hover"),_=document.querySelector("#edit-avatar-form");function p(t){const s=new e(t,"#card-template",S,C,k);m.addItem(s.getView())}new t(h,l).enableValidation(),new t(h,d).enableValidation();const m=new class{constructor(e,t){let{renderer:s}=e;this._renderer=s,this._container=document.querySelector(t)}renderItems(e){e.forEach((e=>{this._renderer(e)}))}addItem(e){this._container.prepend(e)}}({renderer:p},".cards__list"),v=new class extends s{constructor(e){let{popupSelector:t}=e;super({popupSelector:t}),this._popupImage=document.querySelector(".modal__preview-image"),this._popupTitle=document.querySelector(".modal__preview-title")}open(e){this._popupImage.src=e.link,this._popupImage.alt=e.name,this._popupTitle.textContent=e.name,super.open()}}({popupSelector:"#preview-image-modal"});function S(e){v.open(e)}v.setEventListeners();const E=new r({popupSelector:"#profile-edit-modal"},(function(e){let{name:t,about:s}=e;E.showLoading(),f.updateInfo(t,s).then((e=>{g.setUserInfo(e),E.close(),l.reset()})).catch((e=>{console.log(e)})).finally((()=>E.hideLoading()))}),"Saving...");E.setEventListeners();const b=new r({popupSelector:"#card-add-modal"},(function(e){b.showLoading(),f.addCard(e.title,e.link).then((e=>{p(e),b.close(),d.reset()})).catch((e=>{console.log(e)})).finally((()=>b.hideLoading()))}),"Creating...");b.setEventListeners();const L=new r({popupSelector:"#edit-avatar-modal"},(function(e){L.showLoading(),f.updateAvatar(e).then((e=>{g.setUserAvatar(e.avatar),L.close(),_.reset()})).catch((e=>{console.log(e)})).finally((()=>{L.hideLoading()}))}),"Saving...");L.setEventListeners(),i.addEventListener("click",(function(){const e=g.getUserInfo();o.value=e.title,a.value=e.description,E.open()})),c.addEventListener("click",(function(){b.open()}));const g=new class{constructor(e){let{nameSelector:t,jobSelector:s,avatarSelector:r}=e;this._name=document.querySelector(t),this._job=document.querySelector(s),this._avatar=document.querySelector(r)}getUserInfo(){return{title:this._name.textContent,description:this._job.textContent,avatar:this._avatar.src}}setUserInfo(e){let{name:t,about:s}=e;this._name.textContent=t,this._job.textContent=s}setUserAvatar(e){this._avatar.src=e}}({nameSelector:".profile__title",jobSelector:".profile__description",avatarSelector:".profile__image"}),f=new class{constructor(e){let{baseUrl:t,headers:s}=e;this._baseUrl=t,this._headers=s}_checkResponse(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}renderCards(){Promise.all(this.getUserInfo(),this.getInitialCards())}getUserInfo(){return fetch(`${this._baseUrl}/users/me`,{headers:this._headers}).then(this._checkResponse)}updateInfo(e,t){return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e,about:t})}).then(this._checkResponse)}updateAvatar(e){let{link:t}=e;return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:t})}).then(this._checkResponse)}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{headers:this._headers}).then(this._checkResponse)}addCard(e,t){return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:e,link:t})}).then(this._checkResponse)}deleteCard(e){return fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers}).then(this._checkResponse)}likeCard(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"PUT",headers:this._headers}).then(this._checkResponse)}dislikeCard(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"DELETE",headers:this._headers}).then(this._checkResponse)}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"c6c362c5-eda0-4373-9004-84a264f04392","Content-Type":"application/json"}});function k(e){e.isLiked()?f.dislikeCard(e._id).then((t=>{e.setIsLiked(t.isLiked)})).catch((e=>{console.log(e)})):f.likeCard(e._id).then((t=>{e.setIsLiked(t.isLiked)})).catch((e=>{console.log(e)}))}f.getInitialCards().then((e=>{m.renderItems(e)})).catch((e=>{console.log(e)})),f.getUserInfo().then((e=>{g.setUserInfo(e),g.setUserAvatar(e.avatar)})).catch((e=>{console.log(e)}));const y=new class extends s{constructor(e){let{popupSelector:t}=e;super({popupSelector:t}),this._popupForm=this._popup.querySelector(".modal__form"),this._submitButton=this._popup.querySelector(".modal__button")}handleDelete(e){this._handleDeleteSubmit=e}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleDeleteSubmit()}))}renderLoading=e=>{this._submitButton.textContent=e?"Deleting...":"Yes"}}({popupSelector:"#card-delete-modal"});function C(e){y.open(),y.handleDelete((()=>{y.renderLoading(!0),f.deleteCard(e._id).then((()=>{y.close(),e.handleDeleteCard()})).catch((e=>{console.log(e)})).finally((()=>{y.renderLoading(!1)}))}))}y.setEventListeners(),u.addEventListener("click",(()=>{L.open()})),new t(h,_).enableValidation()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,